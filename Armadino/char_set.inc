/* LED patterns for digit 0 to 9 */
const uint8_t ledNum[] PROGMEM = {
	B00111111,
	B00000110,
	B01011011,
	B01001111,
	B01100110,
	B01101101,
	B01111101,
	B00000111,
	B01111111,
	B01101111
};

/* Printable ASCII character set for the LED matrix, from ASCII 33 to 126
Each character is an 5 columns x 8 row bitmap. A byte is used to represent each
column. 4th and 5th columns are 'optional' such that subsequent columns will be
skipped over too when any of these columns contains all 0's. */
#define CHAR_WIDTH 5
const uint8_t  charSet[] PROGMEM = {
	B00000000,
	B01011111,
	B00000000,
	B00000000,
	B00000000 , // Symbol ! (ASCII 33)
	B00000000,
	B00000100,
	B00000011,
	B00000000,
	B00000000 , // Symbol " (double quote)
	B00010100,
	B01111111,
	B00010100,
	B01111111,
	B00010100 , // Symbol #
	B00100100,
	B00101010,
	B01111111,
	B00101010,
	B00010010 , // Symbol $
	B00100011,
	B00010011,
	B00001000,
	B01100100,
	B01100010 , // Symbol %
	B00110110,
	B01001001,
	B01010110,
	B00100000,
	B01010000 , // Symbol &
	B00000000,
	B00000100,
	B00000011,
	B00000000,
	B00000000 , // Symbol ' (single quote)
	B00011100,
	B00100010,
	B01000001,
	B00000000,
	B00000000 , // Symbol (
	B01000001,
	B00100010,
	B00011100,
	B00000000,
	B00000000 , // Symbol )
	B00100010,
	B00010100,
	B01111111,
	B00010100,
	B00100010 , // Symbol *
	B00001000,
	B00001000,
	B00111110,
	B00001000,
	B00001000 , // Symbol +
	B10000000,
	B01100000,
	B00000000,
	B00000000,
	B00000000 , // Symbol ,
	B00001000,
	B00001000,
	B00001000,
	B00001000,
	B00000000 , // Symbol -
	B00000000,
	B00100000,
	B00000000,
	B00000000,
	B00000000 , // Symbol . (period)
	B00100000,
	B00010000,
	B00001000,
	B00000100,
	B00000010 , // Symbol /
	B00011110,
	B00100001,
	B00100001,
	B00011110,
	B00000000 , // Digit 0
	B00100010,
	B00111111,
	B00100000,
	B00000000,
	B00000000 , // Digit 1
	B00100010,
	B00110001,
	B00101001,
	B00100110,
	B00000000 , // Digit 2
	B00100001,
	B00100101,
	B00100101,
	B00011010,
	B00000000 , // Digit 3
	B00011000,
	B00010100,
	B00010010,
	B00111111,
	B00010000 , // Digit 4
	B00100111,
	B00100101,
	B00100101,
	B00011001,
	B00000000 , // Digit 5
	B00011110,
	B00100101,
	B00100101,
	B00011001,
	B00000000 , // Digit 6
	B00000001,
	B00111001,
	B00000101,
	B00000011,
	B00000000 , // Digit 7
	B00011010,
	B00100101,
	B00100101,
	B00011010,
	B00000000 , // Digit 8
	B00100110,
	B00101001,
	B00101001,
	B00011110,
	B00000000 , // Digit 9
	B00000000,
	B00010100,
	B00000000,
	B00000000,
	B00000000 , // Symbol :
	B10000000,
	B01101000,
	B00000000,
	B00000000,
	B00000000 , // Symbol ;
	B00001000,
	B00010100,
	B00100010,
	B01000001,
	B00000000 , // Symbol <
	B00010100,
	B00010100,
	B00010100,
	B00010100,
	B00000000 , // Symbol =
	B01000001,
	B00100010,
	B00010100,
	B00001000,
	B00000000 , // Symbol >
	B00000000,
	B00000010,
	B01010001,
	B00001001,
	B00000110 , // Symbol ?
	B00111110,
	B01000001,
	B01011101,
	B01010101,
	B01011110 , // Symbol @
	B00111110,
	B00001001,
	B00001001,
	B00111110,
	B00000000 , // Letter A
	B00111111,
	B00100101,
	B00100101,
	B00011010,
	B00000000 , // Letter B
	B00011110,
	B00100001,
	B00100001,
	B00010010,
	B00000000 , // Letter C
	B00111111,
	B00100001,
	B00100001,
	B00011110,
	B00000000 , // Letter D
	B00111111,
	B00100101,
	B00100101,
	B00100001,
	B00000000 , // Letter E
	B00111111,
	B00000101,
	B00000101,
	B00000001,
	B00000000 , // Letter F
	B00011110,
	B00100001,
	B00101001,
	B00111001,
	B00000000 , // Letter G
	B00111111,
	B00000100,
	B00000100,
	B00111111,
	B00000000 , // Letter H
	B00100001,
	B00111111,
	B00100001,
	B00000000,
	B00000000 , // Letter I
	B00100001,
	B00100001,
	B00011111,
	B00000001,
	B00000000 , // Letter J
	B00111111,
	B00001100,
	B00010010,
	B00100001,
	B00000000 , // Letter K
	B00111111,
	B00100000,
	B00100000,
	B00100000,
	B00000000 , // Letter L
	B00111111,
	B00000010,
	B00000100,
	B00000010,
	B00111111 , // Letter M
	B00111111,
	B00000100,
	B00001000,
	B00111111,
	B00000000 , // Letter N
	B00011110,
	B00100001,
	B00100001,
	B00100001,
	B00011110 , // Letter O
	B00111111,
	B00001001,
	B00001001,
	B00000110,
	B00000000 , // Letter P
	B00011110,
	B00100001,
	B00110001,
	B00111110,
	B00100000 , // Letter Q
	B00111111,
	B00001001,
	B00011001,
	B00100110,
	B00000000 , // Letter R
	B00010010,
	B00100101,
	B00100101,
	B00100101,
	B00011000 , // Letter S
	B00000001,
	B00000001,
	B00111111,
	B00000001,
	B00000001 , // Letter T
	B00011111,
	B00100000,
	B00100000,
	B00011111,
	B00000000 , // Letter U
	B00001111,
	B00010000,
	B00100000,
	B00010000,
	B00001111 , // Letter V
	B00011111,
	B00100000,
	B00011000,
	B00100000,
	B00011111 , // Letter W
	B00100001,
	B00010010,
	B00001100,
	B00010010,
	B00100001 , // Letter X
	B00000001,
	B00000010,
	B00111100,
	B00000010,
	B00000001 , // Letter Y
	B00110001,
	B00101001,
	B00100101,
	B00100011,
	B00000000 , // Letter Z
	B01111111,
	B01000001,
	B00000000,
	B00000000,
	B00000000 , // Symbol [
	B00000010,
	B00000100,
	B00001000,
	B00010000,
	B00100000 , // Symbol \ (backslash)
	B01000001,
	B01111111,
	B00000000,
	B00000000,
	B00000000 , // Symbol ]
	B00000010,
	B00000001,
	B00000010,
	B00000000,
	B00000000 , // Symbol ^
	B00100000,
	B00100000,
	B00100000,
	B00100000,
	B00000000 , // Symbol _
	B00000001,
	B00000110,
	B00000000,
	B00000000,
	B00000000 , // Symbol ` (grave accent)
	B00010000,
	B00101010,
	B00101010,
	B00111100,
	B00100000 , // Letter a
	B00111111,
	B00100100,
	B00100100,
	B00011000,
	B00000000 , // Letter b
	B00011000,
	B00100100,
	B00100100,
	B00000000,
	B00000000 , // Letter c
	B00011000,
	B00100100,
	B00100100,
	B00111111,
	B00000000 , // Letter d
	B00011100,
	B00101010,
	B00101010,
	B00101100,
	B00000000 , // Letter e
	B00000100,
	B00111110,
	B00000101,
	B00000101,
	B00000000 , // Letter f
	B10011000,
	B10100100,
	B10100100,
	B01111000,
	B00000000 , // Letter g
	B00111111,
	B00000100,
	B00000100,
	B00111000,
	B00000000 , // Letter h
	B00100100,
	B00111101,
	B00100000,
	B00000000,
	B00000000 , // Letter i
	B10000000,
	B10000000,
	B01111101,
	B00000000,
	B00000000 , // Letter j
	B00111111,
	B00001000,
	B00010100,
	B00100000,
	B00000000 , // Letter k
	B00100001,
	B00111111,
	B00100000,
	B00000000,
	B00000000 , // Letter l
	B00111100,
	B00000100,
	B00111100,
	B00000100,
	B00111000 , // Letter m
	B00111100,
	B00000100,
	B00000100,
	B00111000,
	B00000000 , // Letter n
	B00011000,
	B00100100,
	B00100100,
	B00011000,
	B00000000 , // Letter o
	B11111100,
	B00100100,
	B00100100,
	B00011000,
	B00000000 , // Letter p
	B00011000,
	B00100100,
	B00100100,
	B11111100,
	B00000000 , // Letter q
	B00111100,
	B00000100,
	B00000100,
	B00000000,
	B00000000 , // Letter r
	B00100100,
	B00101010,
	B00101010,
	B00010000,
	B00000000 , // Letter s
	B00000100,
	B00011111,
	B00100100,
	B00100100,
	B00000000 , // Letter t
	B00011100,
	B00100000,
	B00100000,
	B00111100,
	B00000000 , // Letter u
	B00011100,
	B00100000,
	B00011100,
	B00000000,
	B00000000 , // Letter v
	B00011100,
	B00100000,
	B00011000,
	B00100000,
	B00011100 , // Letter w
	B00100100,
	B00011000,
	B00011000,
	B00100100,
	B00000000 , // Letter x
	B10011100,
	B10100000,
	B10100000,
	B01111100,
	B00000000 , // Letter y
	B00100100,
	B00110100,
	B00101100,
	B00100100,
	B00000000 , // Letter z
	B00001000,
	B00110110,
	B01000001,
	B00000000,
	B00000000 , // Symbol {
	B00000000,
	B01111111,
	B00000000,
	B00000000,
	B00000000 , // Symbol | (bar)
	B01000001,
	B00110110,
	B00001000,
	B00000000,
	B00000000 , // Symbol }
	B00000100,
	B00000010,
	B00000100,
	B00000010,
	B00000000 	// Symbol ~ (ASCII 126)
};
